/******************************************************************************
 * Copyright (C) 2016 by Ralf Kaestner                                        *
 * ralf.kaestner@gmail.com                                                    *
 *                                                                            *
 * This program is free software; you can redistribute it and/or modify       *
 * it under the terms of the Lesser GNU General Public License as published by*
 * the Free Software Foundation; either version 3 of the License, or          *
 * (at your option) any later version.                                        *
 *                                                                            *
 * This program is distributed in the hope that it will be useful,            *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               *
 * Lesser GNU General Public License for more details.                        *
 *                                                                            *
 * You should have received a copy of the Lesser GNU General Public License   *
 * along with this program. If not, see <http://www.gnu.org/licenses/>.       *
 ******************************************************************************/

/** \file ThreadedQuery.h
  * \brief Header file providing the example ThreadedQuery class interface
  */

#ifndef ROS_PROLOG_SERVER_THREADED_QUERY_H
#define ROS_PROLOG_SERVER_THREADED_QUERY_H

#include <list>
#include <string>

#include <boost/thread/condition.hpp>
#include <boost/thread/mutex.hpp>
#include <boost/shared_ptr.hpp>

#include <roscpp_nodewrap/worker/WorkerEvent.h>

#include <prolog_common/Bindings.h>

#include <prolog_swi/Engine.h>
#include <prolog_swi/Query.h>

namespace prolog {
  namespace server {
    /** \brief Threaded Prolog query
      */  
    class ThreadedQuery {
    public:
      /** \brief Definition of the threaded Prolog query mode enumerable
        *   type
        */
      enum Mode {
        BatchMode,
        IncrementalMode
      };
      
      /** \brief Default constructor
        */
      ThreadedQuery();
      
      /** \brief Copy constructor
        */
      ThreadedQuery(const ThreadedQuery& src);
      
      /** \brief Destructor
        */
      virtual ~ThreadedQuery();
    
      /** \brief Retrieve the error generated by this threaded Prolog
        *   query
        */
      std::string getError() const;
      
      /** \brief Retrieve the next solution generated by this threaded
        *   Prolog query
        */
      bool getNextSolution(Bindings& bindings, std::string& error, bool
        block = false) const;
      
      /** \brief True, if this threaded Prolog query has at least one
        *   more solution
        */
      bool hasSolution(std::string& error, bool block = false) const;
      
    private:
      friend class MultiThreadedServer;
      
      /** \brief Threaded Prolog query (implementation)
        */ 
      class Impl {
      public:
        Impl(const swi::Query& query, const swi::Engine& engine,
          const Mode mode = BatchMode);
        virtual ~Impl();
        
        bool execute(const nodewrap::WorkerEvent& event);
        
        swi::Query query_;
        swi::Engine engine_;
        
        Mode mode_;
        
        std::list<Bindings> solutions_;
        
        std::string error_;
        
        boost::mutex mutex_;
        boost::condition condition_;
      };
      
      /** \brief The threaded Prolog query's implementation
        */
      boost::shared_ptr<Impl> impl_;
    };
  };
};

#endif
